@page "/Admin/GameServerTypes"
@using MMO.Game.Data
@using MMO.Data
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Authorization

@inject ApplicationDbContext DbContext
@attribute [Authorize("Admin")]

<PageTitle>Server Types</PageTitle>
<h3>Server Types</h3>

<MudButton
    Variant="@Variant.Filled"
    Color="Color.Secondary"
    OnClick="AddServerType">
    Add Server Type
</MudButton>

<MudDataGrid ShowMenuIcon="true"
    @ref="_grid"
    T="GameServerType"
    Items="_items"
    ReadOnly="false"
    EditMode="DataGridEditMode.Form"
    EditTrigger="DataGridEditTrigger.Manual"
    CommittedItemChanges="CommittedItemChanges">
    <NoRecordsContent><MudText Typo="Typo.h4">No Server Types</MudText></NoRecordsContent>
    <Columns>
        <PropertyColumn Property="c => c.GameServerTypeId" Sortable="true" IsEditable="false"/>
        <PropertyColumn Property="c => c.Name" Sortable="true"/>
        <PropertyColumn Property="c => c.MapName" Sortable="true" Groupable="true"/>
        <PropertyColumn Property="c => c.StartType" Sortable="true" Groupable="true">
            <EditTemplate>
                <MudSelect T="GameServerStartType" @bind-Value="context.Item.StartType">
                    <MudSelectItem Value="@GameServerStartType.OnDemand">@GameServerStartType.OnDemand</MudSelectItem>
                    <MudSelectItem Value="@GameServerStartType.OnePerNetwork">@GameServerStartType.OnePerNetwork</MudSelectItem>
                    <MudSelectItem Value="@GameServerStartType.OnePerHost">@GameServerStartType.OnePerHost</MudSelectItem>
                </MudSelect>
            </EditTemplate>
        </PropertyColumn>
        <PropertyColumn Title="Instances" Property="arg => arg.Instances.Count"></PropertyColumn>
        <TemplateColumn>
            <CellTemplate>
                <MudStack Row>
                    <MudIconButton
                        Icon="@Icons.Material.Rounded.Delete"
                        OnClick="() => DeleteServerType(context.Item)">
                    </MudIconButton>
                    <MudIconButton Size="@Size.Small" Icon="@Icons.Material.Outlined.Edit" OnClick="@context.Actions.StartEditingItemAsync"/>
                </MudStack>
            </CellTemplate>
        </TemplateColumn>
    </Columns>
</MudDataGrid>

@code {

    private MudDataGrid<GameServerType> _grid = null!;
    private IQueryable<GameServerType> _items = null!;

    protected override void OnInitialized()
    {
        _items = DbContext.GameServerTypes.AsNoTrackingWithIdentityResolution();
    }

    private async Task AddServerType()
    {
        await _grid.SetEditingItemAsync(new GameServerType
        {
            Name = "ServerTypeName",
            MapName = "MapName"
        });
    }

    private async Task DeleteServerType(GameServerType type)
    {
        await using var transaction = await DbContext.Database.BeginTransactionAsync();
        await DbContext.GameServerTypes.Where(serverType => serverType == type).ExecuteDeleteAsync();
        await transaction.CommitAsync();
    }

    private ValueTask OnLocationChanging(LocationChangingContext context)
    {
        if (DbContext.ChangeTracker.HasChanges())
        {
            context.PreventNavigation();
        }

        return ValueTask.CompletedTask;
    }

    async Task CommittedItemChanges(GameServerType item)
    {
        await using var transaction = await DbContext.Database.BeginTransactionAsync();
        DbContext.GameServerTypes.Update(item);
        await DbContext.SaveChangesAsync();
        await transaction.CommitAsync();
    }

}