@page "/Admin/GameServerDefinitions"
@using MMO.Game.Data
@using MMO.Data
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Authorization
@using System.Text.Json

@inject ApplicationDbContext DbContext
@inject IDbContextFactory<ApplicationDbContext> DbFactory
@attribute [Authorize("Admin")]

<PageTitle>Server Definitions</PageTitle>
<h3>Server Definitions</h3>

<MudButton
    Variant="@Variant.Filled"
    Color="Color.Secondary"
    OnClick="AddWorldServerDefinitions">
    Add World Server
</MudButton>
<MudButton
    Variant="@Variant.Filled"
    Color="Color.Primary"
    OnClick="AddEntryServerDefinitions">
    Add Entry Server
</MudButton>

<MudDataGrid ShowMenuIcon="true"
    @ref="_grid"
    T="GameServerDefinition"
    Items="_items"
    ReadOnly="false"
    EditMode="DataGridEditMode.Form"
    EditTrigger="DataGridEditTrigger.Manual"
    CommittedItemChanges="CommittedItemChanges">
    <NoRecordsContent><MudText Typo="Typo.h4">No Server Types</MudText></NoRecordsContent>
    <Columns>
        <PropertyColumn Property="c => c.GameServerDefinitionId" Sortable="true" IsEditable="false"/>
        <PropertyColumn Property="c => c.GameServerType" Sortable="true"/>
        <PropertyColumn Property="c => c.MapName" Sortable="true" Groupable="true"/>
        <PropertyColumn Title="Instances" Property="arg => arg.Instances.Count"></PropertyColumn>
        <TemplateColumn>
            <CellTemplate>
                <MudStack Row>
                    <MudIconButton
                        Icon="@Icons.Material.Rounded.Delete"
                        OnClick="() => DeleteServerDefinitions(context.Item)">
                    </MudIconButton>
                    <MudIconButton Size="@Size.Small" Icon="@Icons.Material.Outlined.Edit" OnClick="@context.Actions.StartEditingItemAsync"/>
                </MudStack>
            </CellTemplate>
        </TemplateColumn>
    </Columns>
</MudDataGrid>

@code {

    private MudDataGrid<GameServerDefinition> _grid = null!;
    private IQueryable<GameServerDefinition> _items = null!;
    private bool _shouldRender = true;

    private string json = ""; 

    protected override bool ShouldRender()
    {
        return _shouldRender;
    }

    protected override void OnInitialized()
    {
        _items = DbContext.GameServerDefinitions.AsNoTrackingWithIdentityResolution();
    }

    private async Task AddWorldServerDefinitions()
    {
        await _grid.SetEditingItemAsync(new WorldServerDefinition
        {
            GameServerType = GameServerType.World,
            MapName = "MapName"
        });
    }
    
    private async Task AddEntryServerDefinitions()
    {
        await _grid.SetEditingItemAsync(new EntryServerDefinition
        {
            GameServerType = GameServerType.Entry,
            MapName = "MapName"
        });
    }
    
    private async Task DeleteServerDefinitions(GameServerDefinition definition)
    {
        _shouldRender = false;
        try
        {
            await using var context = await DbFactory.CreateDbContextAsync();
            await using var transaction = await context.Database.BeginTransactionAsync();
            await context.GameServerDefinitions.Where(serverType => serverType == definition).ExecuteDeleteAsync();
            await transaction.CommitAsync();
        }
        finally
        {
            _shouldRender = true;
        }
    }

    async Task CommittedItemChanges(GameServerDefinition item)
    {
        _shouldRender = false;
        try
        {
            await using var context = await DbFactory.CreateDbContextAsync();
            await using var transaction = await context.Database.BeginTransactionAsync();
            context.GameServerDefinitions.Update(item);
            await context.SaveChangesAsync();
            await transaction.CommitAsync();
        }
        finally
        {
            _shouldRender = true;
        }
    }

}