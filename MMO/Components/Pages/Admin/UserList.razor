@page "/Admin/Users"
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.Components.QuickGrid
@using Microsoft.EntityFrameworkCore
@using MMO.Data
@using MMO.Game.Data
@inject UserManager<ApplicationUser> UserManager
@inject ApplicationDbContext DbContext
@inject NavigationManager NavigationManager
@rendermode InteractiveServer
<h3>Server</h3>

<DataGrid Items="Users" @ref="myGrid">
    <PropertyColumn Property="@(c => c.Id)" Sortable="true"/>
    <PropertyColumn Property="@(c => c.UserName)" Sortable="true"/>
    <PropertyColumn Property="@(c => c.Email)" Sortable="true"/>
    <TemplateColumn Title="Character">
        <button class="btn btn-primary" @onclick="() => AddCharacter(context)">Add</button>
    </TemplateColumn>
    <!--<TemplateColumn Title="Admin">
        <InputCheckbox readonly="readonly" Value="@context.Roles.Contains("Admin")"></InputCheckbox>
    </TemplateColumn>-->
</DataGrid>

@code
{
    DataGrid<ApplicationUser> myGrid;
    IQueryable<ApplicationUser> Users;

    protected override void OnInitialized()
    {
        Users = UserManager.Users;
        /*var userRoles = DbContext.UserRoles.Join(DbContext.Roles,
            userRole => userRole.RoleId,
            role => role.Id,
            (userRole, applicationRole) => new { userRole.UserId, applicationRole.Name });
        Users = DbContext.Users.OrderBy(dto => dto.Id).GroupJoin(userRoles,
            user => user.Id,
            role => role.UserId,
            (user, roles) => new UserListDto
                (user.Id, user.UserName, user.Email, roles.Select(role => role.Name)));*/
    }
    
    public async Task AddCharacter(ApplicationUser context)
    {
        DbContext.Characters.Add(new Character
        {
            Account = context, 
            Name = context.UserName ?? "Default Name"
        });
        await DbContext.SaveChangesAsync();
        await myGrid.RefreshDataAsync();
        NavigationManager.NavigateTo("Admin/Characters");
    }
}